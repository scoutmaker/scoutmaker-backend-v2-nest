// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByNulls"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum UserRole {
  SCOUT
  PLAYMAKER_SCOUT
  PLAYMAKER_SCOUT_MANAGER
  ADMIN
}

enum AccountStatus {
  PENDING
  ACTIVE
  BLOCKED
}

model User {
  id                         String        @id @default(cuid())
  role                       UserRole      @default(SCOUT)
  status                     AccountStatus @default(PENDING)
  email                      String        @unique
  firstName                  String
  lastName                   String
  phone                      String?
  city                       String?
  password                   String
  activeRadius               Int           @default(0)
  confirmationCode           String?       @unique
  confirmationCodeExpiryDate DateTime?
  resetPasswordToken         String?       @unique
  resetPasswordExpiryDate    DateTime?
  scoutmakerv1Id             String?       @unique
  createdAt                  DateTime      @default(now())
  updatedAt                  DateTime      @updatedAt

  // Relation fields
  region                                 Region?                             @relation(fields: [regionId], references: [id])
  regionId                               String?
  footballRole                           UserFootballRole?                   @relation(fields: [footballRoleId], references: [id])
  footballRoleId                         String?
  club                                   Club?                               @relation(fields: [clubId], references: [id], name: "club")
  clubId                                 String?
  createdClubs                           Club[]                              @relation("created-clubs")
  createdTeams                           Team[]
  createdPlayers                         Player[]
  createdMatches                         Match[]
  createdNotes                           Note[]
  createdInsiderNotes                    InsiderNote[]
  createdReportSkillAssessmentCategories ReportSkillAssessmentCategory[]
  createdReportSkillAssessmentTemplates  ReportSkillAssessmentTemplate[]
  createdReportTemplates                 ReportTemplate[]
  createdAgencies                        Agency[]
  createdReports                         Report[]
  createdOrders                          Order[]                             @relation("author")
  acceptedOrders                         Order[]                             @relation("scout")
  followedPlayers                        FollowPlayer[]
  followedTeams                          FollowTeam[]
  followedScouts                         FollowScout[]                       @relation("follower")
  followedAgencies                       FollowAgency[]
  followedBy                             FollowScout[]                       @relation("followee")
  organization                           Organization?                       @relation(fields: [organizationId], references: [id])
  organizationId                         String?
  createdPlayerStats                     PlayerStats[]
  subscriptions                          UserSubscription[]
  playerAccessControlList                UserPlayerAccessControlEntry[]
  reportAccessControlList                UserReportAccessControlEntry[]
  noteAccessControlList                  UserNoteAccessControlEntry[]
  insiderNoteAccessControlList           UserInsiderNoteAccessControlEntry[]
  likedPlayers                           LikePlayer[]
  likedReports                           LikeReport[]
  likedNotes                             LikeNote[]
  likedInsiderNotes                      LikeInsiderNote[]
  likedTeams                             LikeTeam[]
  matchAttendances                       MatchAttendance[]
  profile                                ScoutProfile?
  reportBackgroundImage                  ReportBackgroundImage?              @relation(fields: [reportBackgroundImageId], references: [id], onDelete: Cascade)
  reportBackgroundImageId                String?
  reportTemplate                         ReportTemplate?                     @relation(fields: [reportTemplateId], references: [id], onDelete: Cascade, name: "defaultReportTemplate")
  reportTemplateId                       String?
}

model ScoutProfile {
  id                   String    @id @default(cuid())
  cooperationStartDate DateTime?
  description          String?
  rating               Int       @default(1)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relation fields
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model UserFootballRole {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  users User[]
}

model Country {
  id         String   @id @default(cuid())
  name       String   @unique
  code       String   @unique
  isEuMember Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relation fields
  regions      Region[]
  competitions Competition[]
  clubs        Club[]
  players      Player[]
  agencies     Agency[]
}

model Region {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  country           Country                      @relation(fields: [countryId], references: [id])
  countryId         String
  users             User[]
  clubs             Club[]
  competitionGroups RegionsOnCompetitionGroups[]

  @@unique([name, countryId])
}

model Club {
  id         String   @id @default(cuid())
  name       String
  slug       String   @unique
  lnpId      String?
  city       String?
  postalCode String?
  street     String?
  website    String?
  twitter    String?
  facebook   String?
  instagram  String?
  isPublic   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relation fields
  country   Country @relation(fields: [countryId], references: [id])
  countryId String
  region    Region? @relation(fields: [regionId], references: [id])
  regionId  String?
  author    User    @relation(fields: [authorId], references: [id], name: "created-clubs")
  authorId  String
  teams     Team[]
  users     User[]  @relation("club")
}

model Team {
  id               String   @id @default(cuid())
  name             String
  slug             String   @unique
  minut90url       String?
  transfermarktUrl String?
  lnpId            String?
  isPublic         Boolean  @default(false)
  scoutmakerv1Id   String?  @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relation fields
  club             Club                       @relation(fields: [clubId], references: [id])
  clubId           String
  author           User                       @relation(fields: [authorId], references: [id])
  authorId         String
  competitions     CompetitionParticipation[]
  players          TeamAffiliation[]
  homeMatches      Match[]                    @relation("homeTeam")
  awayMatches      Match[]                    @relation("awayTeam")
  followedBy       FollowTeam[]
  notesMeta        NoteMeta[]
  insiderNotesMeta InsiderNoteMeta[]
  reportsMeta      ReportMeta[]
  playerStatsMeta  PlayerStatsMeta[]
  likes            LikeTeam[]
}

model Season {
  id        String   @id @default(cuid())
  name      String   @unique
  isActive  Boolean? @unique
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Realation fields
  competitionParticipations CompetitionParticipation[]
  matches                   Match[]
}

enum Gender {
  MALE
  FEMALE
}

model Competition {
  id               String   @id @default(cuid())
  name             String
  level            Int?
  gender           Gender   @default(MALE)
  transfermarktUrl String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relation fields
  country                   Country                                   @relation(fields: [countryId], references: [id])
  countryId                 String
  ageCategory               CompetitionAgeCategory                    @relation(fields: [ageCategoryId], references: [id])
  ageCategoryId             String
  type                      CompetitionType                           @relation(fields: [typeId], references: [id])
  typeId                    String
  juniorLevel               CompetitionJuniorLevel?                   @relation(fields: [juniorLevelId], references: [id])
  juniorLevelId             String?
  clubs                     CompetitionParticipation[]
  groups                    CompetitionGroup[]
  matches                   Match[]
  notesMeta                 NoteMeta[]
  insiderNotesMeta          InsiderNoteMeta[]
  reportsMeta               ReportMeta[]
  userSubscriptions         CompetitionsOnUserSubscriptions[]
  organizationSubscriptions CompetitionsOnOrganizationSubscriptions[]

  @@unique([level, countryId])
}

model CompetitionGroup {
  id               String   @id @default(cuid())
  name             String
  transfermarktUrl String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relation fields
  competition              Competition                                    @relation(fields: [competitionId], references: [id])
  competitionId            String
  regions                  RegionsOnCompetitionGroups[]
  teams                    CompetitionParticipation[]
  matches                  Match[]
  notesMeta                NoteMeta[]
  insiderNotesMeta         InsiderNoteMeta[]
  reportsMeta              ReportMeta[]
  userSubscriptions        CompetitionGroupsOnUserSubscriptions[]
  organizationSubscription CompetitionGroupsOnOrganizationSubscriptions[]

  @@unique([name, competitionId])
}

model RegionsOnCompetitionGroups {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  // Relation fields
  region    Region           @relation(fields: [regionId], references: [id])
  regionId  String
  group     CompetitionGroup @relation(fields: [groupId], references: [id])
  groupId   String

  @@unique([regionId, groupId])
}

model CompetitionAgeCategory {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  competitions Competition[]
}

model CompetitionType {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  competitions Competition[]
}

model CompetitionJuniorLevel {
  id        String   @id @default(cuid())
  name      String
  level     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  competitions Competition[]
}

model CompetitionParticipation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  team          Team              @relation(fields: [teamId], references: [id])
  teamId        String
  competition   Competition       @relation(fields: [competitionId], references: [id])
  competitionId String
  season        Season            @relation(fields: [seasonId], references: [id])
  seasonId      String
  group         CompetitionGroup? @relation(fields: [groupId], references: [id])
  groupId       String?

  @@unique([teamId, competitionId, seasonId])
}

model PlayerPositionType {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  positions PlayerPosition[]
  roles     PlayerRole[]
}

model PlayerPosition {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  listOrder Int?

  // Relation fields
  positionType         PlayerPositionType?           @relation(fields: [playerPositionTypeId], references: [id])
  playerPositionTypeId String?
  players              Player[]
  playersSecondary     SecondaryPositionsOnPlayers[]
  notesMeta            NoteMeta[]
  reportsMeta          ReportMeta[]
}

enum Foot {
  LEFT
  RIGHT
  BOTH
}

model Player {
  id                      String   @id @default(cuid())
  firstName               String
  lastName                String
  slug                    String   @unique
  yearOfBirth             Int
  height                  Int?
  weight                  Int?
  footed                  Foot?
  lnpId                   String?
  lnpUrl                  String?
  minut90id               String?
  minut90url              String?
  transfermarktId         String?
  transfermarktUrl        String?
  inStatUrl               String?
  isPublic                Boolean  @default(false)
  scoutmakerv1Id          String?  @unique
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  averagePercentageRating Float?

  // Relation fields
  country                       Country                                @relation(fields: [countryId], references: [id])
  countryId                     String
  primaryPosition               PlayerPosition                         @relation(fields: [primaryPositionId], references: [id])
  primaryPositionId             String
  author                        User                                   @relation(fields: [authorId], references: [id])
  authorId                      String
  role                          PlayerRole?                            @relation(fields: [roleId], references: [id])
  roleId                        String?
  secondaryPositions            SecondaryPositionsOnPlayers[]
  teams                         TeamAffiliation[]
  notes                         Note[]
  insiderNotes                  InsiderNote[]
  reports                       Report[]
  orders                        Order[]
  agencies                      AgencyAffiliation[]
  followedBy                    FollowPlayer[]
  stats                         PlayerStats[]
  userAccessControlList         UserPlayerAccessControlEntry[]
  organizationAccessControlList OrganizationPlayerAccessControlEntry[]
  likes                         LikePlayer[]
}

model SecondaryPositionsOnPlayers {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  player           Player         @relation(fields: [playerId], references: [id])
  playerId         String
  position         PlayerPosition @relation(fields: [playerPositionId], references: [id])
  playerPositionId String

  @@unique([playerId, playerPositionId])
}

model TeamAffiliation {
  id        String    @id @default(cuid())
  startDate DateTime
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relation fields
  player   Player @relation(fields: [playerId], references: [id])
  playerId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
}

model Match {
  id               String   @id @default(cuid())
  date             DateTime
  homeGoals        Int?
  awayGoals        Int?
  videoUrl         String?
  transfermarktUrl String?
  isPublic         Boolean  @default(false)
  scoutmakerv1Id   String?  @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relation fields
  homeTeam      Team              @relation(fields: [homeTeamId], references: [id], name: "homeTeam")
  homeTeamId    String
  awayTeam      Team              @relation(fields: [awayTeamId], references: [id], name: "awayTeam")
  awayTeamId    String
  competition   Competition       @relation(fields: [competitionId], references: [id])
  competitionId String
  group         CompetitionGroup? @relation(fields: [groupId], references: [id])
  groupId       String?
  season        Season            @relation(fields: [seasonId], references: [id])
  seasonId      String
  author        User              @relation(fields: [authorId], references: [id])
  authorId      String
  notes         Note[]
  reports       Report[]
  orders        Order[]
  stats         PlayerStats[]
  attendances   MatchAttendance[]
}

model Note {
  id               String          @id @default(cuid())
  docNumber        Int             @default(autoincrement())
  shirtNo          Int?
  description      String?
  maxRatingScore   Int?
  rating           Int?
  percentageRating Float?
  scoutmakerv1Id   String?         @unique
  observationType  ObservationType @default(VIDEO)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  // Relation fields
  player                        Player?                              @relation(fields: [playerId], references: [id])
  playerId                      String?
  match                         Match?                               @relation(fields: [matchId], references: [id])
  matchId                       String?
  author                        User                                 @relation(fields: [authorId], references: [id])
  authorId                      String
  meta                          NoteMeta?
  userAccessControlList         UserNoteAccessControlEntry[]
  organizationAccessControlList OrganizationNoteAccessControlEntry[]
  likes                         LikeNote[]
}

model NoteMeta {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  note               Note              @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId             String            @unique
  position           PlayerPosition?   @relation(fields: [positionId], references: [id])
  positionId         String?
  team               Team?             @relation(fields: [teamId], references: [id])
  teamId             String?
  competition        Competition?      @relation(fields: [competitionId], references: [id])
  competitionId      String?
  competitionGroup   CompetitionGroup? @relation(fields: [competitionGroupId], references: [id])
  competitionGroupId String?
}

model InsiderNote {
  id          String   @id @default(cuid())
  docNumber   Int      @default(autoincrement())
  informant   String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation fields
  player                        Player                                      @relation(fields: [playerId], references: [id])
  playerId                      String
  author                        User                                        @relation(fields: [authorId], references: [id])
  authorId                      String
  meta                          InsiderNoteMeta?
  userAccessControlList         UserInsiderNoteAccessControlEntry[]
  organizationAccessControlList OrganizationInsiderNoteAccessControlEntry[]
  likes                         LikeInsiderNote[]
}

model InsiderNoteMeta {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  insiderNote        InsiderNote       @relation(fields: [insiderNoteId], references: [id])
  insiderNoteId      String            @unique
  team               Team?             @relation(fields: [teamId], references: [id])
  teamId             String?
  competition        Competition?      @relation(fields: [competitionId], references: [id])
  competitionId      String?
  competitionGroup   CompetitionGroup? @relation(fields: [competitionGroupId], references: [id])
  competitionGroupId String?
}

model ReportSkillAssessmentCategory {
  id        String   @id @default(cuid())
  name      String
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  author                         User                            @relation(fields: [authorId], references: [id])
  authorId                       String
  reportSkillAssessmentTemplates ReportSkillAssessmentTemplate[]
}

model ReportSkillAssessmentTemplate {
  id             String   @id @default(cuid())
  name           String
  shortName      String
  hasScore       Boolean
  scoutmakerv1Id String?  @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relation fields
  category        ReportSkillAssessmentCategory               @relation(fields: [categoryId], references: [id])
  categoryId      String
  author          User                                        @relation(fields: [authorId], references: [id])
  authorId        String
  reportTemplates SkillAssessmentTemplatesOnReportTemplates[]
  assessments     ReportSkillAssessment[]
}

model ReportTemplate {
  id             String   @id @default(cuid())
  name           String
  maxRatingScore Int
  isPublic       Boolean  @default(false)
  scoutmakerv1Id String?  @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relation fields
  author                   User                                        @relation(fields: [authorId], references: [id])
  authorId                 String
  skillAssessmentTemplates SkillAssessmentTemplatesOnReportTemplates[]
  asDefault                User[]                                      @relation("defaultReportTemplate")
}

model SkillAssessmentTemplatesOnReportTemplates {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  reportTemplate            ReportTemplate                @relation(fields: [reportTemplateId], references: [id])
  reportTemplateId          String
  skillAssessmentTemplate   ReportSkillAssessmentTemplate @relation(fields: [skillAssessmentTemplateId], references: [id])
  skillAssessmentTemplateId String

  @@unique([reportTemplateId, skillAssessmentTemplateId])
}

model ReportSkillAssessment {
  id          String   @id @default(cuid())
  rating      Int?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation fields
  template   ReportSkillAssessmentTemplate @relation(fields: [templateId], references: [id])
  templateId String
  report     Report                        @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId   String
}

enum ObservationType {
  LIVE
  VIDEO
}

enum ReportStatus {
  IN_PROGRESS
  FINISHED
}

model Report {
  id               String          @id @default(cuid())
  docNumber        Int             @default(autoincrement())
  shirtNo          Int?
  minutesPlayed    Int?
  goals            Int?
  assists          Int?
  yellowCards      Int?
  redCards         Int?
  videoUrl         String?
  videoDescription String?
  maxRatingScore   Int
  finalRating      Int?
  summary          String?
  avgRating        Float?
  percentageRating Float?
  status           ReportStatus    @default(IN_PROGRESS)
  observationType  ObservationType @default(VIDEO)
  scoutmakerv1Id   String?         @unique
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  // Relation fields
  author                        User                                   @relation(fields: [authorId], references: [id])
  authorId                      String
  player                        Player                                 @relation(fields: [playerId], references: [id])
  playerId                      String
  match                         Match?                                 @relation(fields: [matchId], references: [id])
  matchId                       String?
  order                         Order?                                 @relation(fields: [orderId], references: [id])
  orderId                       String?
  meta                          ReportMeta?
  skills                        ReportSkillAssessment[]
  userAccessControlList         UserReportAccessControlEntry[]
  organizationAccessControlList OrganizationReportAccessControlEntry[]
  likes                         LikeReport[]
}

model ReportMeta {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  report             Report            @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId           String            @unique
  position           PlayerPosition?   @relation(fields: [positionId], references: [id])
  positionId         String?
  team               Team?             @relation(fields: [teamId], references: [id])
  teamId             String?
  competition        Competition?      @relation(fields: [competitionId], references: [id])
  competitionId      String?
  competitionGroup   CompetitionGroup? @relation(fields: [competitionGroupId], references: [id])
  competitionGroupId String?
}

enum OrderStatus {
  OPEN
  ACCEPTED
  CLOSED
}

model Order {
  id             String      @id @default(cuid())
  docNumber      Int         @default(autoincrement())
  status         OrderStatus @default(OPEN)
  description    String?
  acceptDate     DateTime?
  closeDate      DateTime?
  executionDate  DateTime?
  scoutmakerv1Id String?     @unique
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relation fields
  author   User     @relation(fields: [authorId], references: [id], name: "author")
  authorId String
  scout    User?    @relation(fields: [scoutId], references: [id], name: "scout")
  scoutId  String?
  player   Player?  @relation(fields: [playerId], references: [id])
  playerId String?
  match    Match?   @relation(fields: [matchId], references: [id])
  matchId  String?
  reports  Report[]
}

model Agency {
  id               String   @id @default(cuid())
  name             String
  slug             String   @unique
  city             String?
  postalCode       String?
  street           String?
  transfermarktUrl String?
  email            String?
  website          String?
  twitter          String?
  facebook         String?
  instagram        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relation fields
  country    Country             @relation(fields: [countryId], references: [id])
  countryId  String
  author     User                @relation(fields: [authorId], references: [id])
  authorId   String
  players    AgencyAffiliation[]
  followedBy FollowAgency[]
}

model AgencyAffiliation {
  id        String    @id @default(cuid())
  startDate DateTime
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relation fields
  player   Player @relation(fields: [playerId], references: [id])
  playerId String
  agency   Agency @relation(fields: [agencyId], references: [id])
  agencyId String
}

model FollowPlayer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  player     Player @relation(fields: [playerId], references: [id])
  playerId   String
  follower   User   @relation(fields: [followerId], references: [id])
  followerId String

  @@unique([playerId, followerId])
}

model FollowTeam {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  team       Team   @relation(fields: [teamId], references: [id])
  teamId     String
  follower   User   @relation(fields: [followerId], references: [id])
  followerId String

  @@unique([teamId, followerId])
}

model FollowScout {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  scout      User   @relation(fields: [scoutId], references: [id], name: "followee")
  scoutId    String
  follower   User   @relation(fields: [followerId], references: [id], name: "follower")
  followerId String

  @@unique([scoutId, followerId])
}

model FollowAgency {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  agency     Agency @relation(fields: [agencyId], references: [id])
  agencyId   String
  follower   User   @relation(fields: [followerId], references: [id])
  followerId String

  @@unique([agencyId, followerId])
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  members                      User[]
  subscriptions                OrganizationSubscription[]
  playerAccessControlList      OrganizationPlayerAccessControlEntry[]
  reportAccessControlList      OrganizationReportAccessControlEntry[]
  noteAccessControlList        OrganizationNoteAccessControlEntry[]
  insiderNoteAccessControlList OrganizationInsiderNoteAccessControlEntry[]
}

model PlayerStats {
  id            String   @id @default(cuid())
  minutesPlayed Int      @default(0)
  goals         Int      @default(0)
  assists       Int      @default(0)
  yellowCards   Int      @default(0)
  redCards      Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relation fields
  author   User             @relation(fields: [authorId], references: [id])
  authorId String
  player   Player           @relation(fields: [playerId], references: [id])
  playerId String
  match    Match            @relation(fields: [matchId], references: [id])
  matchId  String
  meta     PlayerStatsMeta?

  @@unique([playerId, matchId])
}

model PlayerStatsMeta {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  stats   PlayerStats @relation(fields: [statsId], references: [id])
  statsId String      @unique
  team    Team?       @relation(fields: [teamId], references: [id])
  teamId  String?
}

model ReportBackgroundImage {
  id        String   @id @default(cuid())
  name      String
  url       String
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model UserSubscription {
  id        String   @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  user              User                                   @relation(fields: [userId], references: [id])
  userId            String
  competitions      CompetitionsOnUserSubscriptions[]
  competitionGroups CompetitionGroupsOnUserSubscriptions[]
}

model CompetitionsOnUserSubscriptions {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  subscription   UserSubscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String
  competition    Competition      @relation(fields: [competitionId], references: [id])
  competitionId  String

  @@unique([subscriptionId, competitionId])
}

model CompetitionGroupsOnUserSubscriptions {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  subscription   UserSubscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String
  group          CompetitionGroup @relation(fields: [groupId], references: [id])
  groupId        String

  @@unique([subscriptionId, groupId])
}

model OrganizationSubscription {
  id        String   @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  organization      Organization                                   @relation(fields: [organizationId], references: [id])
  organizationId    String
  competitions      CompetitionsOnOrganizationSubscriptions[]
  competitionGroups CompetitionGroupsOnOrganizationSubscriptions[]
}

model CompetitionsOnOrganizationSubscriptions {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  subscription   OrganizationSubscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String
  competition    Competition              @relation(fields: [competitionId], references: [id])
  competitionId  String

  @@unique([subscriptionId, competitionId])
}

model CompetitionGroupsOnOrganizationSubscriptions {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  subscription   OrganizationSubscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String
  group          CompetitionGroup         @relation(fields: [groupId], references: [id])
  groupId        String

  @@unique([subscriptionId, groupId])
}

enum AccessControlEntryPermissionLevel {
  READ
  READ_AND_WRITE
  FULL
}

model UserPlayerAccessControlEntry {
  id              String                            @id @default(cuid())
  permissionLevel AccessControlEntryPermissionLevel @default(READ)
  createdAt       DateTime                          @default(now())
  updatedAt       DateTime                          @updatedAt

  // Relation Fields
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  player   Player @relation(fields: [playerId], references: [id])
  playerId String

  @@unique([userId, playerId])
  @@map("user_player_access_control_list")
}

model OrganizationPlayerAccessControlEntry {
  id              String                            @id @default(cuid())
  permissionLevel AccessControlEntryPermissionLevel @default(READ)
  createdAt       DateTime                          @default(now())
  updatedAt       DateTime                          @updatedAt

  // Relation Fields
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  player         Player       @relation(fields: [playerId], references: [id])
  playerId       String

  @@unique([organizationId, playerId])
  @@map("organization_player_access_control_list")
}

model UserReportAccessControlEntry {
  id              String                            @id @default(cuid())
  permissionLevel AccessControlEntryPermissionLevel @default(READ)
  createdAt       DateTime                          @default(now())
  updatedAt       DateTime                          @updatedAt

  // Relation Fields
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId String

  @@unique([userId, reportId])
  @@map("user_report_access_control_list")
}

model OrganizationReportAccessControlEntry {
  id              String                            @id @default(cuid())
  permissionLevel AccessControlEntryPermissionLevel @default(READ)
  createdAt       DateTime                          @default(now())
  updatedAt       DateTime                          @updatedAt

  // Relation Fields
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  report         Report       @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId       String

  @@unique([organizationId, reportId])
  @@map("organization_report_access_control_list")
}

model UserNoteAccessControlEntry {
  id              String                            @id @default(cuid())
  permissionLevel AccessControlEntryPermissionLevel @default(READ)
  createdAt       DateTime                          @default(now())
  updatedAt       DateTime                          @updatedAt

  // Relation Fields
  user   User   @relation(fields: [userId], references: [id])
  userId String
  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId String

  @@unique([userId, noteId])
  @@map("user_note_access_control_list")
}

model OrganizationNoteAccessControlEntry {
  id              String                            @id @default(cuid())
  permissionLevel AccessControlEntryPermissionLevel @default(READ)
  createdAt       DateTime                          @default(now())
  updatedAt       DateTime                          @updatedAt

  // Relation Fields
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  note           Note         @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId         String

  @@unique([organizationId, noteId])
  @@map("organization_note_access_control_list")
}

model UserInsiderNoteAccessControlEntry {
  id              String                            @id @default(cuid())
  permissionLevel AccessControlEntryPermissionLevel @default(READ)
  createdAt       DateTime                          @default(now())
  updatedAt       DateTime                          @updatedAt

  // Relation Fields
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  insiderNote   InsiderNote @relation(fields: [insiderNoteId], references: [id])
  insiderNoteId String

  @@unique([userId, insiderNoteId])
  @@map("user_insider_note_access_control_list")
}

model OrganizationInsiderNoteAccessControlEntry {
  id              String                            @id @default(cuid())
  permissionLevel AccessControlEntryPermissionLevel @default(READ)
  createdAt       DateTime                          @default(now())
  updatedAt       DateTime                          @updatedAt

  // Relation Fields
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  insiderNote    InsiderNote  @relation(fields: [insiderNoteId], references: [id])
  insiderNoteId  String

  @@unique([organizationId, insiderNoteId])
  @@map("organization_insider_note_access_control_list")
}

model LikePlayer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  player   Player @relation(fields: [playerId], references: [id])
  playerId String
  user     User   @relation(fields: [userId], references: [id])
  userId   String

  @@unique([playerId, userId])
}

model LikeReport {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId String
  user     User   @relation(fields: [userId], references: [id])
  userId   String

  @@unique([reportId, userId])
}

model LikeNote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([noteId, userId])
}

model LikeInsiderNote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  insiderNote   InsiderNote @relation(fields: [insiderNoteId], references: [id])
  insiderNoteId String
  user          User        @relation(fields: [userId], references: [id])
  userId        String

  @@unique([insiderNoteId, userId])
}

model LikeTeam {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields
  team   Team   @relation(fields: [teamId], references: [id])
  teamId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([teamId, userId])
}

model MatchAttendance {
  id              String          @id @default(cuid())
  isActive        Boolean?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  observationType ObservationType

  // Relation fields
  match   Match  @relation(fields: [matchId], references: [id])
  matchId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  @@unique([matchId, userId])
  @@unique([userId, isActive])
}

model PlayerRole {
  id          String   @id @default(cuid())
  name        String
  altName     String?
  description String?
  isPublished Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation fields
  positionType   PlayerPositionType  @relation(fields: [positionTypeId], references: [id])
  positionTypeId String
  players        Player[]
  examples       PlayerRoleExample[]
}

model PlayerRoleExample {
  id          String   @id @default(cuid())
  player      String
  type        String
  isPublished Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation fields
  role   PlayerRole @relation(fields: [roleId], references: [id])
  roleId String
}
